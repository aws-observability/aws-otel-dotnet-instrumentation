name: 'Build and Scan Images'
description: 'Build Docker image and scan for vulnerabilities'
inputs:
  image-name:
    description: 'Docker image name'
    required: true
  dockerfile:
    description: 'Path to Dockerfile (can use environment variables)'
    required: true
  zip-path:
    description: 'Path to distribution zip file (required for zip-based builds)'
    required: false
  platform:
    description: 'Platform (linux or windows, for zip-based builds)'
    required: false
    default: 'linux'
  docker-platform:
    description: 'Docker platform flag (e.g., linux/arm64)'
    required: false
  skip-dirs:
    description: 'Directories to skip during scanning'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Prepare Linux distribution
      if: "inputs.dockerfile == './Dockerfile.linux' && inputs.platform == 'linux'"
      shell: bash
      run: |
        set -e
        rm -rf ./OpenTelemetryDistribution
        mkdir -p ./OpenTelemetryDistribution
        unzip -o ${{ inputs.zip-path }} -d ./OpenTelemetryDistribution
        cp THIRD-PARTY-LICENSES ./OpenTelemetryDistribution/THIRD-PARTY-LICENSES
        echo "IMAGE_NAME=${{ inputs.image-name }}" >> $GITHUB_ENV

    - name: Prepare Windows distribution
      if: "(inputs.dockerfile == './Dockerfile.windows2019' || inputs.dockerfile == './Dockerfile.windows2022') && inputs.platform == 'windows'"
      shell: powershell
      run: |
        Expand-Archive -LiteralPath ${{ inputs.zip-path }} -DestinationPath .\OpenTelemetryDistribution -Force
        $IMAGE_NAME="${{ inputs.image-name }}"
        echo "IMAGE_NAME=$IMAGE_NAME" >> $env:GITHUB_ENV

    - name: Build Docker image (from zip)
      if: "inputs.dockerfile == './Dockerfile.linux' || inputs.dockerfile == './Dockerfile.windows2019' || inputs.dockerfile == './Dockerfile.windows2022'"
      shell: bash
      run: |
        set -e
        DOCKERFILE_PATH="${{ inputs.dockerfile }}"
        DOCKERFILE_PATH=$(eval echo "$DOCKERFILE_PATH")
        
        if [ -n "${{ inputs.docker-platform }}" ]; then
          docker build --platform ${{ inputs.docker-platform }} -t ${{ inputs.image-name }} -f "$DOCKERFILE_PATH" .
        else
          docker build -t ${{ inputs.image-name }} -f "$DOCKERFILE_PATH" .
        fi

    - name: Build and run in Docker container (from source)
      if: "inputs.dockerfile == './docker/alpine.dockerfile'"
      shell: bash
      run: |
        set -e
        IMAGE_NAME="${{ inputs.image-name }}"
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
        docker build -t $IMAGE_NAME -f "${{ inputs.dockerfile }}" ./docker
        docker run --rm --mount type=bind,source="${GITHUB_WORKSPACE}",target=/project $IMAGE_NAME \
          /bin/sh -c 'git config --global --add safe.directory /project && dotnet test && ./build.sh'

    - name: Scan Docker image
      uses: ./.github/actions/image_scan
      with:
        image-ref: ${{ inputs.image-name }}
        severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'
        logout: 'true'
        skip-dirs: ${{ inputs.skip-dirs }}