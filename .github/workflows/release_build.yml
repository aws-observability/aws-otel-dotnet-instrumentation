name: Release Build
on:
  workflow_dispatch:
    inputs:
      version:
        description: The version to tag the release with, e.g., 1.2.0
        required: true

env:
  AWS_DEFAULT_REGION: us-east-1
  # AWS_PUBLIC_ECR_REGION: us-east-1
  AWS_PRIVATE_ECR_REGION: us-east-1
  # RELEASE_PUBLIC_REPOSITORY: public.ecr.aws/aws-observability/adot-autoinstrumentation-python
  RELEASE_PRIVATE_REPOSITORY: 637423224110.dkr.ecr.us-east-1.amazonaws.com/aws-observability/adot-autoinstrumentation-dotnet-staging
  RELEASE_PRIVATE_REGISTRY: 637423224110.dkr.ecr.us-east-1.amazonaws.com
  RELEASE_PRIVATE_S3: s3://adot-autoinstrumentation-dotnet-staging
  # PACKAGE_NAME: aws-opentelemetry-distro

permissions:
  id-token: write
  contents: write

jobs:
  build-and-upload:
    strategy:
      fail-fast: false
      matrix:
        aws-region: [ 'us-east-1' ]
    uses: ./.github/workflows/main_build.yml
    secrets: inherit
    with:
      caller-workflow-name: 'release_build_workflow'
      


  release:
    needs: [build-and-upload]
    environment: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Contrib Repo @ SHA - ${{ github.sha }}
        uses: actions/checkout@v4

      - name: Configure AWS credentials for private ECR
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_ECR_RELEASE }}
          aws-region: ${{ env.AWS_PRIVATE_ECR_REGION }}

      - name: Log in to AWS private ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.RELEASE_PRIVATE_REGISTRY }}
          
      - name: Download Linux x64 Artifact
        uses: actions/download-artifact@v3
        with:
          name: aws-distro-opentelemetry-dotnet-instrumentation-linux-glibc-x64.zip
          path: ./artifacts/linux/x64

      - name: Download Windows Artifact
        uses: actions/download-artifact@v3
        with:
          name: aws-distro-opentelemetry-dotnet-instrumentation-windows
          path: ./artifacts/windows

      - name: Download macOS Artifact
        uses: actions/download-artifact@v3
        with:
          name: aws-distro-opentelemetry-dotnet-instrumentation-macOS
          path: ./artifacts/macOS

      - name: Download Linux ARM Artifact
        uses: actions/download-artifact@v3
        with:
          name: aws-distro-opentelemetry-dotnet-instrumentation-linux-arm64
          path: ./artifacts/linux/arm64

      - name: Download Linux ARM MUSL Artifact
        uses: actions/download-artifact@v3
        with:
          name: aws-distro-opentelemetry-dotnet-instrumentation-linux-arm64-musl
          path: ./artifacts/linux/arm64-musl

      - name: Download Linux X64 MUSL Artifact
        uses: actions/download-artifact@v3
        with:
          name: aws-distro-opentelemetry-dotnet-instrumentation-linux-x64-musl
          path: ./artifacts/linux/x64-musl
      
      - name: Upload to Private S3 Bucket
      - run: |
          PREFIX="Release_v${{github.event.inputs.version}}_"

          find ./artifacts/ -name "*.zip" | while read file; do
          base=$(basename "$file")
          aws s3 cp "$file" "${{ env.RELEASE_PRIVATE_S3 }}$PREFIX$base"
          done

#      - name: Configure AWS credentials for public ECR
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          role-to-assume: ${{ secrets.AWS_ROLE_ARN_ECR_RELEASE }}
#          aws-region: ${{ env.AWS_PUBLIC_ECR_REGION }}
#
#      - name: Log in to AWS public ECR
#        uses: docker/login-action@v3
#        with:
#          registry: public.ecr.aws
      
      # Publish to public ECR
#      - name: Build and push public ECR image
#        uses: docker/build-push-action@v5
#        with:
#          push: true
#          context: .
#          file: ./Dockerfile
#          platforms: linux/amd64,linux/arm64
#          tags: |
#            ${{ env.RELEASE_PUBLIC_REPOSITORY }}:v${{ github.event.inputs.version }}

# Note: Download ECR build from main_build workflow and upload it to S3 location
      
      
      # Publish to private ECR
#      - name: Build and push private ECR image
#        uses: docker/build-push-action@v5
#        with:
#          push: true
#          context: .
#          file: ./Dockerfile
#          platforms: linux/amd64,linux/arm64
#          tags: |
#            ${{ env.RELEASE_PRIVATE_REPOSITORY }}:v${{ github.event.inputs.version }}

      # Publish to GitHub releases
      - name: Create GH release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        run: |
          gh release create --target "$GITHUB_REF_NAME" \
             --title "Release v${{ github.event.inputs.version }}" \
             --draft \
             "v${{ github.event.inputs.version }}" \
             dist/aws_opentelemetry_distro-${{ github.event.inputs.version }}-py3-none-any.whl