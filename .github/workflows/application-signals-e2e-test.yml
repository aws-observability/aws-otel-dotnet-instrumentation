## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
## SPDX-License-Identifier: Apache-2.0

# This is a reusable workflow for running the E2E test for Application Signals.
# It is meant to be called from another workflow.
# Read more about reusable workflows: https://docs.github.com/en/actions/using-workflows/reusing-workflows#overview
name: E2E Testing
on:
  workflow_call:
    inputs:
      ec2-default-image-name:
        required: false
        type: string
        default: 'aws-distro-opentelemetry-dotnet-instrumentation-linux-glibc-x64.zip'
      adot-linux-image-name:
        required: false
        type: string
        default: '637423224110.dkr.ecr.us-east-1.amazonaws.com/aws-observability/adot-autoinstrumentation-dotnet-staging:staging-linux-amd64'
      adot-windows-image-name:
        required: false
        type: string
        default: '637423224110.dkr.ecr.us-east-1.amazonaws.com/aws-observability/adot-autoinstrumentation-dotnet-staging:staging-windows2022'

permissions:
  id-token: write
  contents: read

concurrency:
  group: '${{ github.workflow }} @ ${{ inputs.aws-region }}'
  cancel-in-progress: false

jobs:
  upload-main-build:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.STAING_ARTIFACTS_ACCESS_ROLE }}
          role-external-id: ApplicationSignalsDotnet
          aws-region: us-east-1

      - uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.ec2-default-image-name }}

      - name: Upload main-build files to s3
        run: aws s3 cp ./${{ inputs.ec2-default-image-name }} s3://adot-autoinstrumentation-dotnet-staging/${{ inputs.ec2-default-image-name }}

  upload-main-build-image:
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        include:
          - os: windows-2022
          - os: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        
      - name: Configure AWS credentials for private ECR
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.APPLICATION_SIGNALS_E2E_TEST_ACCOUNT_ID }}:role/${{ secrets.APPLICATION_SIGNALS_E2E_TEST_ROLE_NAME}}
          aws-region: us-east-1
          
      - name: Login to Amazon private ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.RELEASE_STAIGNG_REPO }}
        
      - name: Download Linux x64 Artifact
        if: runner.os == 'Linux'
        uses: actions/download-artifact@v3
        with:
          name: aws-distro-opentelemetry-dotnet-instrumentation-linux-glibc-x64.zip
          path: ./artifacts/linux/x64
          
      - name: Download Windows Artifact
        if: runner.os == 'Windows'
        uses: actions/download-artifact@v3
        with:
          name: aws-distro-opentelemetry-dotnet-instrumentation-windows.zip
          path: ./artifacts/windows
          
      - name: Unzip Linux Artifact
        if: runner.os == 'Linux'
        run: |
          unzip ./artifacts/linux/x64/*.zip -d ./OpenTelemetryDistribution

      - name: Unzip Windows Artifact
        if: runner.os == 'Windows'
        run: |
          Expand-Archive -LiteralPath .\artifacts\windows\aws-distro-opentelemetry-dotnet-instrumentation-windows.zip -DestinationPath .\OpenTelemetryDistribution -Force
        shell: powershell

      - name: Build Linux container
        if: runner.os == 'Linux'
        run: |
          set -e
          docker build -t ${{ secrets.RELEASE_STAIGNG_REPO }}:staging-linux-amd64 -f ./Dockerfile.linux .
          docker push ${{ secrets.RELEASE_STAIGNG_REPO }}:staging-linux-amd64
      
      - name: Build Windows container
        if: runner.os == 'Windows'
        run: |
          docker build -t ${{ secrets.RELEASE_STAIGNG_REPO }}:staging-windows2022 -f ./Dockerfile.windows2022 .
          docker push ${{ secrets.RELEASE_STAIGNG_REPO }}:staging-windows2022
        shell: powershell

  dotnet-ec2-default-test:
    needs: [ upload-main-build ]
    uses: aws-observability/aws-application-signals-test-framework/.github/workflows/dotnet-ec2-default-test.yml@main
    secrets: inherit
    with:
      aws-region: us-east-1
      caller-workflow-name: 'main-build'
      staging_distro_name: ${{ inputs.ec2-default-image-name }}
      
  dotnet-eks-linux-test:
    needs: [ upload-main-build, upload-main-build-image ]
    uses: aws-observability/aws-application-signals-test-framework/.github/workflows/dotnet-eks-test.yml@main
    secrets: inherit
    with:
      adot-image-name: ${{ inputs.adot-linux-image-name }}
      aws-region: us-east-1
      test-cluster-name: 'e2e-dotnet-adot-test'
      caller-workflow-name: 'main-build'

  dotnet-eks-windows-test:
    needs: [ upload-main-build, upload-main-build-image ]
    uses: aws-observability/aws-application-signals-test-framework/.github/workflows/dotnet-eks-windows-test.yml@main
    secrets: inherit
    with:
      adot-image-name: ${{ inputs.adot-windows-image-name }}
      aws-region: us-east-1
      test-cluster-name: 'eks-windows-manual'
      caller-workflow-name: 'main-build'
