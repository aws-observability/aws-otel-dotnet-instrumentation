## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
## SPDX-License-Identifier: Apache-2.0

# This is a reusable workflow for running the E2E test for Application Signals.
# It is meant to be called from another workflow.
# Read more about reusable workflows: https://docs.github.com/en/actions/using-workflows/reusing-workflows#overview
name: E2E Testing
on:
  workflow_call:
    inputs:
      ec2-default-image-name:
        required: false
        type: string
        default: 'aws-distro-opentelemetry-dotnet-instrumentation-linux-glibc-x64.zip'
      ec2-windows-image-name:
        required: false
        type: string
        default: 'aws-distro-opentelemetry-dotnet-instrumentation-windows.zip'
      adot-linux-image-name:
        required: false
        type: string
        default: '637423224110.dkr.ecr.us-east-1.amazonaws.com/aws-observability/adot-autoinstrumentation-dotnet-staging:staging-linux-amd64'
      adot-windows-image-name:
        required: false
        type: string
        default: '637423224110.dkr.ecr.us-east-1.amazonaws.com/aws-observability/adot-autoinstrumentation-dotnet-staging:staging-windows2022'

permissions:
  id-token: write
  contents: read

concurrency:
  group: '${{ github.workflow }} @ ${{ inputs.aws-region }}'
  cancel-in-progress: false

jobs:
  upload-main-build:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 #v5.0.0
        with:
          role-to-assume: ${{ secrets.STAING_ARTIFACTS_ACCESS_ROLE }}
          role-external-id: ApplicationSignalsDotnet
          aws-region: us-east-1

      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        with:
          name: ${{ inputs.ec2-default-image-name }}
      
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        with:
          name: ${{ inputs.ec2-windows-image-name }}

      - name: Upload main-build files to s3
        run: |
          aws s3 cp ./${{ inputs.ec2-default-image-name }} s3://adot-autoinstrumentation-dotnet-staging/${{ inputs.ec2-default-image-name }}
          aws s3 cp ./${{ inputs.ec2-windows-image-name }} s3://adot-autoinstrumentation-dotnet-staging/${{ inputs.ec2-windows-image-name }}

  upload-main-build-image:
    runs-on: ${{ matrix.os }}
    outputs: 
      short_sha: ${{ steps.short_sha.outputs.SHORT_SHA }}
    strategy:
      matrix:
        include:
          - os: windows-2022
          - os: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0
      - name: Get Short SHA
        id: short_sha
        run: |
          shortsha="$(git rev-parse --short HEAD)"
          echo "SHORT_SHA=$shortsha" >> $GITHUB_OUTPUT
        shell: bash

      - name: Configure AWS credentials for private ECR
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 #v5.0.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.APPLICATION_SIGNALS_E2E_TEST_ACCOUNT_ID }}:role/${{ secrets.APPLICATION_SIGNALS_E2E_TEST_ROLE_NAME}}
          aws-region: us-east-1

      - name: Login to Amazon private ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.RELEASE_STAIGNG_REPO }}
        
      - name: Download Linux x64 Artifact
        if: runner.os == 'Linux'
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        with:
          name: aws-distro-opentelemetry-dotnet-instrumentation-linux-glibc-x64.zip
          path: ./artifacts/linux/x64
          
      - name: Download Windows Artifact
        if: runner.os == 'Windows'
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 #v5.0.0
        with:
          name: aws-distro-opentelemetry-dotnet-instrumentation-windows.zip
          path: ./artifacts/windows
          
      - name: Unzip Linux Artifact
        if: runner.os == 'Linux'
        run: |
          unzip ./artifacts/linux/x64/*.zip -d ./OpenTelemetryDistribution

      - name: Unzip Windows Artifact
        if: runner.os == 'Windows'
        run: |
          Expand-Archive -LiteralPath .\artifacts\windows\aws-distro-opentelemetry-dotnet-instrumentation-windows.zip -DestinationPath .\OpenTelemetryDistribution -Force
        shell: powershell

      - name: Build Linux container
        if: runner.os == 'Linux'
        run: |
          set -e
          docker build -t ${{ secrets.RELEASE_STAIGNG_REPO }}:staging-linux-amd64-${{ steps.short_sha.outputs.SHORT_SHA }} -f ./Dockerfile.linux .
          docker push ${{ secrets.RELEASE_STAIGNG_REPO }}:staging-linux-amd64-${{ steps.short_sha.outputs.SHORT_SHA }}
      
      - name: Build Windows container
        if: runner.os == 'Windows'
        run: |
          docker build -t ${{ secrets.RELEASE_STAIGNG_REPO }}:staging-windows2022-${{ steps.short_sha.outputs.SHORT_SHA }} -f ./Dockerfile.windows2022 .
          docker push ${{ secrets.RELEASE_STAIGNG_REPO }}:staging-windows2022-${{ steps.short_sha.outputs.SHORT_SHA }}
        shell: powershell
  #
  # PACKAGED DISTRIBUTION LANGUAGE VERSION COVERAGE
  # DEFAULT SETTING: {Dotnet Version}, EC2
  #
  default-v8:
    needs: [ upload-main-build ]
    uses: aws-observability/aws-application-signals-test-framework/.github/workflows/dotnet-ec2-default-test.yml@main
    secrets: inherit
    with:
      aws-region: us-east-1
      caller-workflow-name: 'main-build'
      staging_distro_name: ${{ inputs.ec2-default-image-name }}
      dotnet-version: '8.0'
      
  dotnet-ec2-windows-test:
    needs: [ upload-main-build ]
    uses: aws-observability/aws-application-signals-test-framework/.github/workflows/dotnet-ec2-windows-test.yml@main
    secrets: inherit
    with:
      aws-region: us-east-1
      caller-workflow-name: 'main-build'
      staging_distro_name: ${{ inputs.ec2-windows-image-name }}

  dotnet-ec2-adot-sigv4-test:
    needs: [ upload-main-build ]
    uses: aws-observability/aws-application-signals-test-framework/.github/workflows/dotnet-ec2-adot-sigv4-test.yml@main
    secrets: inherit
    with:
      caller-workflow-name: 'main-build'
      staging_distro_name: ${{ inputs.ec2-default-image-name }}
  
  dotnet-asg-linux-test:
    needs: [ upload-main-build ]
    uses: aws-observability/aws-application-signals-test-framework/.github/workflows/dotnet-ec2-asg-test.yml@main
    secrets: inherit
    with:
      aws-region: us-east-1
      caller-workflow-name: 'main-build'
      staging_distro_name: ${{ inputs.ec2-default-image-name }}

  dotnet-eks-linux-test:
    needs: [ upload-main-build, upload-main-build-image ]
    uses: aws-observability/aws-application-signals-test-framework/.github/workflows/dotnet-eks-test.yml@main
    secrets: inherit
    with:
      adot-image-name: ${{ inputs.adot-linux-image-name }}-${{ needs.upload-main-build-image.outputs.short_sha }}
      aws-region: us-east-1
      test-cluster-name: 'e2e-dotnet-adot-test'
      caller-workflow-name: 'main-build'

  dotnet-eks-windows-test:
    needs: [ upload-main-build, upload-main-build-image ]
    uses: aws-observability/aws-application-signals-test-framework/.github/workflows/dotnet-eks-windows-test.yml@main
    secrets: inherit
    with:
      adot-image-name: ${{ inputs.adot-windows-image-name }}-${{ needs.upload-main-build-image.outputs.short_sha }}
      aws-region: us-east-1
      test-cluster-name: 'e2e-dotnet-windows-canary-test'
      caller-workflow-name: 'main-build'

  dotnet-k8s-test:
    needs: [ upload-main-build, upload-main-build-image ]
    uses: aws-observability/aws-application-signals-test-framework/.github/workflows/dotnet-k8s-test.yml@main
    secrets: inherit
    with:
      aws-region: us-east-1
      caller-workflow-name: 'main-build'
      adot-image-name: ${{ inputs.adot-linux-image-name }}-${{ needs.upload-main-build-image.outputs.short_sha }}
        
  build-lambda-staging-sample-app:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 #v5.0.0
        with:
          role-to-assume: ${{ secrets.STAING_ARTIFACTS_ACCESS_ROLE }}
          role-external-id: ApplicationSignalsDotnet
          aws-region: us-east-1

      - name: Setup .NET
        uses: actions/setup-dotnet@d4c94342e560b34958eacfc5d055d21461ed1c5d #v5.0.0
        with:
          dotnet-version: '8.0.x'

      - name: Setup .NET Lambda Tools
        shell: bash
        run: dotnet tool install -g Amazon.Lambda.Tools
        working-directory: sample-applications/lambda-test-apps/SimpleLambdaFunction

      - name: Build Lambda Sample App
        shell: bash
        run: dotnet lambda package -pl ./src/SimpleLambdaFunction
        working-directory: sample-applications/lambda-test-apps/SimpleLambdaFunction
      
      - name: Upload Sample App to S3
        shell: bash
        run: |
          aws s3 cp ./src/SimpleLambdaFunction/bin/Release/net8.0/SimpleLambdaFunction.zip s3://adot-autoinstrumentation-dotnet-staging/function-${{ github.run_id }}.zip
        working-directory: sample-applications/lambda-test-apps/SimpleLambdaFunction
        
  dotnet-lambda-test:
    needs: [ build-lambda-staging-sample-app ]
    uses: aws-observability/aws-application-signals-test-framework/.github/workflows/dotnet-lambda-test.yml@main
    secrets: inherit
    with:
      aws-region: us-east-1
      caller-workflow-name: 'main-build'

  # This validation is to ensure that all test workflows relevant to this repo are actually
  # being used in this repo, which is referring to all the other jobs in this file.
  #
  # If this starts failing, then it most likely means that new e2e test workflow was
  # added to `aws-observability/aws-application-signals-test-framework`, but was not
  # added to this file. It could also mean that a test in this file has been removed.
  #
  # If a particular test file is intended to not be tested in this repo and should not
  # be failing this particular validation, then choose one of the following options:
  # - Add the test file to the exclusions input (CSV format) to the workflow
  #   (see: https://github.com/aws-observability/aws-application-signals-test-framework/blob/main/.github/workflows/validate-e2e-tests-are-accounted-for.yml#L1)
  # - Update the `validate-e2e-tests-are-accounted-for` job to change which "workflow files are expected to be used by this repo"
  #   (see: https://github.com/aws-observability/aws-application-signals-test-framework/blob/main/.github/workflows/validate-e2e-tests-are-accounted-for.yml)
  validate-all-tests-are-accounted-for:
    uses: aws-observability/aws-application-signals-test-framework/.github/workflows/validate-e2e-tests-are-accounted-for.yml@main
    with:
      exclusions: dotnet-ec2-nuget-test.yml
