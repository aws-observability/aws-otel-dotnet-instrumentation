name: DotNet Instrumentation PR Build
on:
  pull_request:
    branches:
      - main
      - "release/v*"

permissions:
  contents: read
  id-token: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Build on Linux
        if: runner.os == 'Linux'
        run: bash build.sh

      - name: Build on Windows
        if: runner.os == 'Windows'
        run: .\build.cmd

      - name: Build on macOS
        if: runner.os == 'macOS'
        run: bash build.sh

      - name: Test on Linux
        if: runner.os == 'Linux'
        run: dotnet test

      - name: Test on Windows
        if: runner.os == 'Windows'
        run: dotnet test

      - name: Test on macOS
        if: runner.os == 'macOS'
        run: dotnet test

      - name: Build x64 Linux image
        if: runner.os == 'Linux'
        run: |
          rm -rf ./OpenTelemetryDistribution
          mkdir -p ./OpenTelemetryDistribution
          unzip -o bin/aws-distro-opentelemetry-dotnet-instrumentation-linux-glibc-x64.zip -d ./OpenTelemetryDistribution
          cp THIRD-PARTY-LICENSES ./OpenTelemetryDistribution/THIRD-PARTY-LICENSES
          docker build -t pr-build-x64-glibc:latest -f ./Dockerfile.linux .

      - name: Perform Linux image scan
        if: runner.os == 'Linux'
        uses: ./.github/actions/image_scan
        with:
          image-ref: "pr-build-x64-glibc:latest"
          severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'
          logout: 'true'

      - name: Build Windows image
        if: runner.os == 'Windows'
        run: |
          Expand-Archive -LiteralPath .\bin\aws-distro-opentelemetry-dotnet-instrumentation-windows.zip -DestinationPath .\OpenTelemetryDistribution -Force
          docker build -t pr-build-windows-2022:latest -f .\Dockerfile.windows2022 .
        shell: powershell

      - name: Perform Windows image scan
        if: runner.os == 'Windows'
        uses: ./.github/actions/image_scan
        with:
          image-ref: "pr-build-windows-2022:latest"
          severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'
          logout: 'true'

  build-arm:
    runs-on: codebuild-adot-dotnet-runner-${{ github.run_id }}-${{ github.run_attempt }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Build on Linux
        run: bash build.sh

      - name: Test on Linux
        run: dotnet test

      - name: Build Linux image
        run: |
          rm -rf ./OpenTelemetryDistribution
          mkdir -p ./OpenTelemetryDistribution
          unzip -o bin/aws-distro-opentelemetry-dotnet-instrumentation-linux-glibc-arm64.zip -d ./OpenTelemetryDistribution
          cp THIRD-PARTY-LICENSES ./OpenTelemetryDistribution/THIRD-PARTY-LICENSES
          docker build -t pr-build-arm64-glibc:latest -f ./Dockerfile.linux .

      - name: Perform image scan
        uses: ./.github/actions/image_scan
        with:
          image-ref: "pr-build-arm64-glibc:latest"
          severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'
          logout: 'true'

  build-x64-musl:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.2
        with:
          fetch-depth: 0

      - name: Build in Docker container
        run: |
          set -e
          docker build -t pr-build-x64-musl:latest -f "./docker/alpine.dockerfile" ./docker
          docker run --rm --mount type=bind,source="${GITHUB_WORKSPACE}",target=/project pr-build-x64-musl \
            /bin/sh -c 'git config --global --add safe.directory /project && dotnet test && ./build.sh'

      - name: Perform image scan
        uses: ./.github/actions/image_scan
        with:
          image-ref: "pr-build-x64-musl:latest"
          severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'
          logout: 'true'
          skip-dirs: '/usr/share/dotnet,/usr/share/powershell'
  
  build-arm-musl:
    runs-on: codebuild-adot-dotnet-runner-${{ github.run_id }}-${{ github.run_attempt }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.2
        with:
          fetch-depth: 0

      - name: Build in Docker container
        run: |
          set -e
          docker build -t pr-build-arm64-musl -f "./docker/alpine.dockerfile" ./docker
          docker run --rm --mount type=bind,source="${GITHUB_WORKSPACE}",target=/project pr-build-arm64-musl \
            /bin/sh -c 'git config --global --add safe.directory /project && dotnet test && ./build.sh'

      - name: Perform image scan
        uses: ./.github/actions/image_scan
        with:
          image-ref: "pr-build-arm64-musl"
          severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'
          logout: 'true'
          skip-dirs: '/usr/share/dotnet,/usr/share/powershell'

  contract-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Contrib Repo @ SHA - ${{ github.sha }}
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Set up and run contract tests with pytest
        run: |
          cd test
          bash ./build-and-install-distro.sh
          bash ./set-up-contract-tests.sh
          pytest contract-tests/tests