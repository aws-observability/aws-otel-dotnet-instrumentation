name: DotNet Instrumentation PR Build
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - labeled
      - unlabeled
    branches:
      - main
      - "release/v*"

permissions:
  contents: read
  id-token: write

jobs:
  static-code-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0
        with:
          fetch-depth: 0
          
      - name: Check CHANGELOG
        if: always()
        run: |
          # Check if PR is from workflows bot or dependabot
          if [[ "${{ github.event.pull_request.user.login }}" == "aws-application-signals-bot" ]]; then
            echo "Skipping check: PR from aws-application-signals-bot"
            exit 0
          fi
          
          if [[ "${{ github.event.pull_request.user.login }}" == "dependabot[bot]" ]]; then
            echo "Skipping check: PR from dependabot"
            exit 0
          fi
          
          # Check for skip changelog label
          if echo '${{ toJSON(github.event.pull_request.labels.*.name) }}' | jq -r '.[]' | grep -q "skip changelog"; then
            echo "Skipping check: skip changelog label found"
            exit 0
          fi
          
          # Fetch base branch and check for CHANGELOG modifications
          git fetch origin ${{ github.base_ref }}
          if git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -q "CHANGELOG.md"; then
            echo "CHANGELOG.md entry found - check passed"
            exit 0
          fi
          
          echo "It looks like you didn't add an entry to CHANGELOG.md. If this change affects the SDK behavior, please update CHANGELOG.md and link this PR in your entry. If this PR does not need a CHANGELOG entry, you can add the 'Skip Changelog' label to this PR."
          exit 1
          
      - name: Check for versioned GitHub actions
        if: always()
        run: |
          # Get changed GitHub workflow/action files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -E "^\.github/(workflows|actions)/.*\.ya?ml$" || true)
          
          if [ -n "$CHANGED_FILES" ]; then
            # Check for any versioned actions, excluding comments and this validation script
            VIOLATIONS=$(grep -Hn "uses:.*@v" $CHANGED_FILES | grep -v "grep.*uses:.*@v" | grep -v "#.*@v" || true)
            if [ -n "$VIOLATIONS" ]; then
              echo "Found versioned GitHub actions. Use commit SHAs instead:"
              echo "$VIOLATIONS"
              exit 1
            fi
          fi
          
          echo "No versioned actions found in changed files"

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-2022
          - os: ubuntu-latest
          - os: macos-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0

      - name: Setup .NET
        uses: actions/setup-dotnet@d4c94342e560b34958eacfc5d055d21461ed1c5d #v5.0.0
        with:
          dotnet-version: '8.0.x'

      - name: Build on Linux
        if: runner.os == 'Linux'
        run: bash build.sh

      - name: Build on Windows
        if: runner.os == 'Windows'
        run: .\build.cmd

      - name: Build on macOS
        if: runner.os == 'macOS'
        run: bash build.sh

      - name: Test on Linux
        if: runner.os == 'Linux'
        run: dotnet test

      - name: Test on Windows
        if: runner.os == 'Windows'
        run: dotnet test

      - name: Test on macOS
        if: runner.os == 'macOS'
        run: dotnet test

      - name: Upload Artifact on X64 Linux
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: aws-distro-opentelemetry-dotnet-instrumentation-linux-glibc-x64.zip
          path: bin/aws-distro-opentelemetry-dotnet-instrumentation-linux-glibc-x64.zip

      - name: Upload Artifact on Windows
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: aws-distro-opentelemetry-dotnet-instrumentation-windows.zip
          path: bin/aws-distro-opentelemetry-dotnet-instrumentation-windows.zip

  build-arm:
    runs-on: codebuild-adot-dotnet-runner-${{ github.run_id }}-${{ github.run_attempt }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0

      - name: Setup .NET
        uses: actions/setup-dotnet@d4c94342e560b34958eacfc5d055d21461ed1c5d #v5.0.0
        with:
          dotnet-version: '8.0.x'

      - name: Build on Linux
        run: bash build.sh

      - name: Test on Linux
        run: dotnet test

      - name: Upload Artifact on arm64 Linux
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: aws-distro-opentelemetry-dotnet-instrumentation-linux-glibc-arm64.zip
          path: bin/aws-distro-opentelemetry-dotnet-instrumentation-linux-glibc-arm64.zip

  build-x64-musl:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0
        with:
          fetch-depth: 0

      - name: Build in Docker container
        run: |
          set -e
          docker build -t mybuildimage -f "./docker/alpine.dockerfile" ./docker
          docker run --rm --mount type=bind,source="${GITHUB_WORKSPACE}",target=/project mybuildimage \
            /bin/sh -c 'git config --global --add safe.directory /project && dotnet test && ./build.sh'

      - name: Upload Artifact on MUSL X64 Linux
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: aws-distro-opentelemetry-dotnet-instrumentation-linux-musl-x64.zip
          path: bin/aws-distro-opentelemetry-dotnet-instrumentation-linux-musl-x64.zip

  build-arm-musl:
    runs-on: codebuild-adot-dotnet-runner-${{ github.run_id }}-${{ github.run_attempt }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0
        with:
          fetch-depth: 0

      - name: Build in Docker container
        run: |
          set -e
          docker build -t mybuildimage -f "./docker/alpine.dockerfile" ./docker
          docker run --rm --mount type=bind,source="${GITHUB_WORKSPACE}",target=/project mybuildimage \
            /bin/sh -c 'git config --global --add safe.directory /project && dotnet test && ./build.sh'

      - name: Upload Artifact on MUSL arm64 Linux
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: aws-distro-opentelemetry-dotnet-instrumentation-linux-musl-arm64.zip
          path: bin/aws-distro-opentelemetry-dotnet-instrumentation-linux-musl-arm64.zip

  build-and-scan-images:
    needs: [build, build-arm, build-x64-musl, build-arm-musl]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
          - os: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0

      - name: Build and scan Linux images
        if: runner.os == 'Linux'
        uses: ./.github/actions/build-and-scan-image
        with:
          image-name: adot-autoinstrumentation-dotnet:pr-${{ github.event.number }}

      - name: Build and scan Windows image
        if: runner.os == 'Windows'
        uses: ./.github/actions/build-and-scan-image
        with:
          image-name: adot-autoinstrumentation-dotnet:pr-${{ github.event.number }}-windows2022

  contract-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Contrib Repo @ SHA - ${{ github.sha }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0

      - name: Setup .NET
        uses: actions/setup-dotnet@d4c94342e560b34958eacfc5d055d21461ed1c5d #v5.0.0
        with:
          dotnet-version: '8.0.x'

      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c #v6.0.0
        with:
          python-version: '3.10'

      - name: Set up and run contract tests with pytest
        run: |
          cd test
          bash ./build-and-install-distro.sh
          bash ./set-up-contract-tests.sh
          pytest contract-tests/tests